{"version":3,"sources":["stackable.min.js","stackable.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Stackable","token","this","_token","_apiVersion","_apiUrl","value","callback","_get","err","res","containerId","itemId","data","_post","_put","path","endPoint","window","fetch","require","then","response","status","message","json","$","ajax","url","type","context","document","body","success","error","params","paramsStr","encodeURIComponent","method","module","exports"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MCF1hBkB,UAAA,WACJ,QADIA,GACQC,GDOVrB,gBAAgBsB,KCRdF,GAEFE,KAAKC,OAASF,EACdC,KAAKE,YAAc,KACnBF,KAAKG,QAAU,8BDqLjB,MA1KArB,cCfIgB,IDgBFJ,IAAK,gBACLU,MAAO,SCVKC,GACZL,KAAKM,KAAK,aAAc,SAASC,EAAKC,GACpCH,EAASE,EAAKC,QDchBd,IAAK,eACLU,MAAO,SCXIK,EAAaJ,GACxBL,KAAKM,KAAL,cAAwBG,EAAe,SAASF,EAAKC,GACnDH,EAASE,EAAKC,QDehBd,IAAK,oBACLU,MAAO,SCZSK,EAAaJ,GAC7BL,KAAKM,KAAL,cAAwBG,EAAA,SAAqB,SAASF,EAAKC,GACzDH,EAASE,EAAKC,QDgBhBd,IAAK,cACLU,MAAO,SCbGC,GACVL,KAAKM,KAAK,QAAS,SAASC,EAAKC,GAC/BH,EAASE,EAAKC,QDiBhBd,IAAK,UACLU,MAAO,SCdDM,EAAQL,GACdL,KAAKM,KAAL,SAAmBI,EAAU,SAASH,EAAKC,GACzCH,EAASE,EAAKC,QDkBhBd,IAAK,aACLU,MAAO,SCfEK,EAAaE,EAAMN,GAC5BL,KAAKY,MAAM,SAAUH,YAAAA,GAAcE,EAAM,SAASJ,EAAKC,GACrDH,EAASE,EAAKC,QDmBhBd,IAAK,aACLU,MAAO,SChBEM,EAAQC,EAAMN,GACvBL,KAAKa,KAAL,SAAmBH,EAAUC,EAAM,SAASJ,EAAKC,GAC/CH,EAASE,EAAKC,QDoBhBd,IAAK,OACLU,MAAO,SCjBJU,EAAMT,GACT,GAAIU,GAAcf,KAAKG,QAAL,IAAgBH,KAAKE,YAAL,IAAoBY,EAAA,UAAcd,KAAKC,MAEzE,IAAsB,mBAAXe,QAAwB,CAEjC,GAAMC,GAAQC,QAAQ,aACtBD,GAAMF,GACHI,KAAK,SAASC,GACb,GAAIA,EAASC,QAAU,IAAK,CAC1B,GAAId,IACFe,QAAW,wCAEb,OAAOjB,GAASE,GAAK,GAGvB,MAAOa,GAASG,SAEjBJ,KAAK,SAASC,GACb,MAAOf,IAAS,EAAOe,SAI3BI,GAAEC,MACAC,IAAKX,EACLY,KAAM,MACNC,QAASC,SAASC,KAClBC,QAAS,SAASX,GAChBf,GAAS,EAAOe,IAElBY,MAAO,SAASzB,GACdF,EAASE,GAAK,SDqBpBb,IAAK,QACLU,MAAO,SChBHU,EAAMmB,EAAQtB,EAAMN,GACxB,GAAIU,GAAcf,KAAKG,QAAL,IAAgBH,KAAKE,YAAL,IAAoBY,EAAA,UAAcd,KAAKC,OAErEiC,EAAY,EAChB,KAAK,GAAIxC,KAAOuC,GACG,IAAbC,IACFA,GAAa,KAEfA,GAAaxC,EAAM,IAAMyC,mBAAmBF,EAAOvC,GAOrD,IAJIwC,EAAU/C,OAAS,IACrB4B,EAAWA,EAAW,IAAMmB,GAGR,mBAAXlB,QAAwB,CAEjC,GAAMC,GAAQC,QAAQ,aACtBD,GAAMF,GAAWqB,OAAQ,OAAQN,KAAMnB,IACpCQ,KAAK,SAASC,GACb,GAAIA,EAASC,QAAU,IAAK,CAC1B,GAAId,IACFe,QAAW,wCAEb,OAAOjB,GAASE,GAAK,GAGvB,MAAOa,GAASG,SAEjBJ,KAAK,SAASC,GACb,MAAOf,IAAS,EAAOe,SAI3BI,GAAEC,MACAC,IAAKX,EACLY,KAAM,OACNC,QAASC,SAASC,KAClBnB,KAAMA,EACNoB,QAAS,SAASX,GAChBf,GAAS,EAAOe,IAElBY,MAAO,SAASzB,GACdF,EAASE,GAAK,SDoBpBb,IAAK,OACLU,MAAO,SCfJU,EAAMH,EAAMN,GACf,GAAIU,GAAcf,KAAKG,QAAL,IAAgBH,KAAKE,YAAL,IAAoBY,EAAA,UAAcd,KAAKC,MAEzE,IAAsB,mBAAXe,QAAwB,CAEjC,GAAMC,GAAQC,QAAQ,aACtBD,GAAMF,GAAWqB,OAAQ,MAAON,KAAMnB,IACnCQ,KAAK,SAASC,GACb,GAAIA,EAASC,QAAU,IAAK,CAC1B,GAAId,IACFe,QAAW,wCAEb,OAAOjB,GAASE,GAAK,GAGvB,MAAOa,GAASG,SAEjBJ,KAAK,SAASC,GACb,MAAOf,IAAS,EAAOe,SAI3BI,GAAEC,MACAC,IAAKX,EACLY,KAAM,MACNC,QAASC,SAASC,KAClBnB,KAAMA,EACNoB,QAAS,SAASX,GAChBf,GAAS,EAAOe,IAElBY,MAAO,SAASzB,GACdF,EAASE,GAAK,UArKlBT,IA4KgB,oBAAXkB,UACTqB,OAAOC,QAAUxC","file":"stackable.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Stackable = function () {\n  function Stackable(token) {\n    _classCallCheck(this, Stackable);\n\n    this._token = token;\n    this._apiVersion = 'v1';\n    this._apiUrl = 'https://api.stackable.space';\n  }\n\n  _createClass(Stackable, [{\n    key: 'getContainers',\n    value: function getContainers(callback) {\n      this._get('containers', function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'getContainer',\n    value: function getContainer(containerId, callback) {\n      this._get('containers/' + containerId, function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'getContainerItems',\n    value: function getContainerItems(containerId, callback) {\n      this._get('containers/' + containerId + '/items', function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'getAllItems',\n    value: function getAllItems(callback) {\n      this._get('items', function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'getItem',\n    value: function getItem(itemId, callback) {\n      this._get('items/' + itemId, function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'createItem',\n    value: function createItem(containerId, data, callback) {\n      this._post('items', { containerId: containerId }, data, function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: 'updateItem',\n    value: function updateItem(itemId, data, callback) {\n      this._put('items/' + itemId, data, function (err, res) {\n        callback(err, res);\n      });\n    }\n  }, {\n    key: '_get',\n    value: function _get(path, callback) {\n      var endPoint = this._apiUrl + '/' + this._apiVersion + '/' + path + '?token=' + this._token;\n\n      if (typeof window === 'undefined') {\n        //is node\n        var fetch = require('node-fetch');\n        fetch(endPoint).then(function (response) {\n          if (response.status >= 400) {\n            var err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        }).then(function (response) {\n          return callback(false, response);\n        });\n      } else {\n        //is browser\n        $.ajax({\n          url: endPoint,\n          type: 'GET',\n          context: document.body,\n          success: function success(response) {\n            callback(false, response);\n          },\n          error: function error(err) {\n            callback(err, false);\n          }\n        });\n      }\n    }\n  }, {\n    key: '_post',\n    value: function _post(path, params, data, callback) {\n      var endPoint = this._apiUrl + '/' + this._apiVersion + '/' + path + '?token=' + this._token;\n\n      var paramsStr = '';\n      for (var key in params) {\n        if (paramsStr != '') {\n          paramsStr += '&';\n        }\n        paramsStr += key + '=' + encodeURIComponent(params[key]);\n      }\n\n      if (paramsStr.length > 0) {\n        endPoint = endPoint + '&' + paramsStr;\n      }\n\n      if (typeof window === 'undefined') {\n        //is node\n        var fetch = require('node-fetch');\n        fetch(endPoint, { method: 'POST', body: data }).then(function (response) {\n          if (response.status >= 400) {\n            var err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        }).then(function (response) {\n          return callback(false, response);\n        });\n      } else {\n        //is browser\n        $.ajax({\n          url: endPoint,\n          type: 'POST',\n          context: document.body,\n          data: data,\n          success: function success(response) {\n            callback(false, response);\n          },\n          error: function error(err) {\n            callback(err, false);\n          }\n        });\n      }\n    }\n  }, {\n    key: '_put',\n    value: function _put(path, data, callback) {\n      var endPoint = this._apiUrl + '/' + this._apiVersion + '/' + path + '?token=' + this._token;\n\n      if (typeof window === 'undefined') {\n        //is node\n        var fetch = require('node-fetch');\n        fetch(endPoint, { method: 'PUT', body: data }).then(function (response) {\n          if (response.status >= 400) {\n            var err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        }).then(function (response) {\n          return callback(false, response);\n        });\n      } else {\n        //is browser\n        $.ajax({\n          url: endPoint,\n          type: 'PUT',\n          context: document.body,\n          data: data,\n          success: function success(response) {\n            callback(false, response);\n          },\n          error: function error(err) {\n            callback(err, false);\n          }\n        });\n      }\n    }\n  }]);\n\n  return Stackable;\n}();\n\nif (typeof window === 'undefined') {\n  module.exports = Stackable;\n}","class Stackable {\n  constructor(token) {\n    this._token = token;\n    this._apiVersion = 'v1';\n    this._apiUrl = 'https://api.stackable.space';\n  }\n\n  getContainers(callback) {\n    this._get('containers', function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  getContainer(containerId, callback) {\n    this._get(`containers/${containerId}`, function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  getContainerItems(containerId, callback) {\n    this._get(`containers/${containerId}/items`, function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  getAllItems(callback) {\n    this._get('items', function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  getItem(itemId, callback) {\n    this._get(`items/${itemId}`, function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  createItem(containerId, data, callback) {\n    this._post('items', {containerId}, data, function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  updateItem(itemId, data, callback) {\n    this._put(`items/${itemId}`, data, function(err, res) {\n      callback(err, res);\n    });\n  }\n\n  _get(path, callback) {\n    let endPoint = `${this._apiUrl}/${this._apiVersion}/${path}?token=${this._token}`;\n\n    if (typeof window === 'undefined') {\n      //is node\n      const fetch = require('node-fetch');\n      fetch(endPoint)\n        .then(function(response) {\n          if (response.status >= 400) {\n            let err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        })\n        .then(function(response) {\n          return callback(false, response);\n        });\n    } else {\n      //is browser\n      $.ajax({\n        url: endPoint,\n        type: 'GET',\n        context: document.body,\n        success: function(response) {\n          callback(false, response);\n        },\n        error: function(err) {\n          callback(err, false);\n        }\n      });\n    }\n  }\n\n  _post(path, params, data, callback) {\n    let endPoint = `${this._apiUrl}/${this._apiVersion}/${path}?token=${this._token}`;\n\n    var paramsStr = '';\n    for (var key in params) {\n      if (paramsStr != '') {\n        paramsStr += '&';\n      }\n      paramsStr += key + '=' + encodeURIComponent(params[key]);\n    }\n\n    if (paramsStr.length > 0) {\n      endPoint = endPoint + '&' + paramsStr;\n    }\n\n    if (typeof window === 'undefined') {\n      //is node\n      const fetch = require('node-fetch');\n      fetch(endPoint, {method: 'POST', body: data})\n        .then(function(response) {\n          if (response.status >= 400) {\n            let err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        })\n        .then(function(response) {\n          return callback(false, response);\n        });\n    } else {\n      //is browser\n      $.ajax({\n        url: endPoint,\n        type: 'POST',\n        context: document.body,\n        data: data,\n        success: function(response) {\n          callback(false, response);\n        },\n        error: function(err) {\n          callback(err, false);\n        }\n      });\n    }\n  }\n\n  _put(path, data, callback) {\n    let endPoint = `${this._apiUrl}/${this._apiVersion}/${path}?token=${this._token}`;\n\n    if (typeof window === 'undefined') {\n      //is node\n      const fetch = require('node-fetch');\n      fetch(endPoint, {method: 'PUT', body: data})\n        .then(function(response) {\n          if (response.status >= 400) {\n            let err = {\n              'message': 'There was an error with this request.'\n            };\n            return callback(err, false);\n          }\n\n          return response.json();\n        })\n        .then(function(response) {\n          return callback(false, response);\n        });\n    } else {\n      //is browser\n      $.ajax({\n        url: endPoint,\n        type: 'PUT',\n        context: document.body,\n        data: data,\n        success: function(response) {\n          callback(false, response);\n        },\n        error: function(err) {\n          callback(err, false);\n        }\n      });\n    }\n  }\n}\n\nif (typeof window === 'undefined') {\n  module.exports = Stackable;\n}\n"],"sourceRoot":"/source/"}